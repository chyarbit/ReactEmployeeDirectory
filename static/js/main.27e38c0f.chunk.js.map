{"version":3,"sources":["utils/API.js","components/Container/index.js","components/SearchForm/index.js","components/SearchResults/index.js","pages/Search.js","App.js","serviceWorker.js","index.js"],"names":["axios","get","Container","props","className","fluid","SearchForm","htmlFor","value","search","onChange","handleInputChange","name","list","type","placeholder","id","employees","map","employee","key","onClick","handleFormSubmit","SearchResults","results","result","alt","src","Search","state","error","event","setState","target","preventDefault","API","then","res","data","status","Error","message","catch","err","console","log","style","minHeight","this","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"kWAIe,EACL,WACN,OAAOA,IAAMC,IAAI,kDCANC,MAJf,SAAmBC,GACjB,OAAO,uCAAKC,UAAS,mBAAcD,EAAME,MAAQ,SAAW,KAAUF,K,MC8BzDG,MA7Bf,SAAoBH,GAClB,OACE,0BAAMC,UAAU,UACd,yBAAKA,UAAU,cACb,2BAAOG,QAAQ,YAAf,kBACA,6BACA,2BACEC,MAAOL,EAAMM,OACbC,SAAUP,EAAMQ,kBAChBC,KAAK,WACLC,KAAK,YACLC,KAAK,OACLV,UAAU,eACVW,YAAY,qBACZC,GAAG,aAEL,8BAAUA,GAAG,aACVb,EAAMc,WAAad,EAAMc,UAAUC,KAAI,SAAAC,GAAQ,OAC9C,4BAAQX,MAAOW,EAAUC,IAAKD,QAGlC,4BAAQL,KAAK,SAASO,QAASlB,EAAMmB,iBAAkBlB,UAAU,mBAAjE,a,MCVOmB,MAZf,SAAuBpB,GACrB,OACE,wBAAIC,UAAU,6BACXD,EAAMqB,SAAWrB,EAAMqB,QAAQN,KAAI,SAAAO,GAAM,OACxC,wBAAIL,IAAKK,EAAQrB,UAAU,mBACzB,yBAAKsB,IAAI,SAASC,IAAKF,EAAQrB,UAAU,oBCgDpCwB,E,4MAjDbC,MAAQ,CACNpB,OAAQ,GACRQ,UAAW,GACXO,QAAS,GACTM,MAAO,I,EAYTnB,kBAAoB,SAAAoB,GAClB,EAAKC,SAAS,CAAEvB,OAAQsB,EAAME,OAAOzB,S,EAGvCc,iBAAmB,SAAAS,GACjBA,EAAMG,iBACNC,EAAW,EAAKN,MAAMpB,QACnB2B,MAAK,SAAAC,GACJ,GAAwB,UAApBA,EAAIC,KAAKC,OACX,MAAM,IAAIC,MAAMH,EAAIC,KAAKG,SAE3B,EAAKT,SAAS,CAAER,QAASa,EAAIC,KAAKG,QAASX,MAAO,QAEnDY,OAAM,SAAAC,GAAG,OAAI,EAAKX,SAAS,CAAEF,MAAOa,EAAIF,c,kEArBxB,IAAD,OAClBN,IACGC,MAAK,SAAAC,GAAQ,IAAMpB,EAAYoB,EAAIC,KAAKd,QAAQN,KAAI,SAAAD,GAAS,MAAK,CAACL,KAAMyB,EAAIzB,SAC9E,EAAKoB,SAAS,CAACf,iBACdyB,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,Q,+BAqB5B,OACE,6BACE,kBAAC,EAAD,CAAWG,MAAO,CAAEC,UAAW,QAC7B,wBAAI3C,UAAU,eAAd,mBACA,kBAAC,EAAD,CACEkB,iBAAkB0B,KAAK1B,iBACvBX,kBAAmBqC,KAAKrC,kBACxBM,UAAW+B,KAAKnB,MAAMZ,YAExB,kBAAC,EAAD,CAAeO,QAASwB,KAAKnB,MAAML,gB,GA3CxByB,aCSNC,MAVf,WACE,OAEI,6BACE,kBAAC,EAAD,QCGYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB3B,MAAK,SAAA4B,GACJA,EAAaC,gBAEdvB,OAAM,SAAAZ,GACLc,QAAQd,MAAMA,EAAMW,c","file":"static/js/main.27e38c0f.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\n// Export an object containing methods we'll use for accessing the Random Users API\r\n\r\nexport default {\r\n  search: function() {\r\n    return axios.get(\"https://randomuser.me/api/?results=100&nat=us\");\r\n  },\r\n};\r\n","import React from \"react\";\n\nfunction Container(props) {\n  return <div className={`container${props.fluid ? \"-fluid\" : \"\"}`} {...props} />;\n}\n\nexport default Container;\n","import React from \"react\";\nimport \"./style.css\";\n\n// Using the datalist element we can create autofill suggestions based on the props.employees array\nfunction SearchForm(props) {\n  return (\n    <form className=\"search\">\n      <div className=\"form-group\">\n        <label htmlFor=\"employee\">Employee Name:</label>\n        <br></br>\n        <input\n          value={props.search}\n          onChange={props.handleInputChange}\n          name=\"employee\"\n          list=\"employees\"\n          type=\"text\"\n          className=\"form-control\"\n          placeholder=\"Type employee name\"\n          id=\"employee\"\n        />\n        <datalist id=\"employees\">\n          {props.employees && props.employees.map(employee => (\n            <option value={employee} key={employee} />\n          ))}\n        </datalist>\n        <button type=\"submit\" onClick={props.handleFormSubmit} className=\"btn btn-success\">\n          Search\n        </button>\n      </div>\n    </form>\n  );\n}\n\nexport default SearchForm;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction SearchResults(props) {\n  return (\n    <ul className=\"list-group search-results\">\n      {props.results && props.results.map(result => (\n        <li key={result} className=\"list-group-item\">\n          <img alt=\"person\" src={result} className=\"img-fluid\" />\n        </li>\n      ))}\n    </ul>\n  );\n}\n\nexport default SearchResults;\n","import React, { Component } from \"react\";\r\nimport API from \"../utils/API\";\r\nimport Container from \"../components/Container\";\r\nimport SearchForm from \"../components/SearchForm\";\r\nimport SearchResults from \"../components/SearchResults\";\r\n\r\nclass Search extends Component {\r\n  state = {\r\n    search: \"\",\r\n    employees: [],\r\n    results: [],\r\n    error: \"\"\r\n  };\r\n\r\n  // When the component mounts, get a list of all employees and update this.state.employees\r\n  componentDidMount() {\r\n    API.search()\r\n      .then(res => {const employees = res.data.results.map(employees => ({name: res.name}));\r\n      this.setState({employees})})\r\n      .catch(err => console.log(err));\r\n  }\r\n\r\n\r\n  handleInputChange = event => {\r\n    this.setState({ search: event.target.value });\r\n  };\r\n\r\n  handleFormSubmit = event => {\r\n    event.preventDefault();\r\n    API.search(this.state.search)\r\n      .then(res => {\r\n        if (res.data.status === \"error\") {\r\n          throw new Error(res.data.message);\r\n        }\r\n        this.setState({ results: res.data.message, error: \"\" });\r\n      })\r\n      .catch(err => this.setState({ error: err.message }));\r\n  };\r\n  \r\n  render() {\r\n    return (\r\n      <div>\r\n        <Container style={{ minHeight: \"80%\" }}>\r\n          <h1 className=\"text-center\">Employee Search</h1>\r\n          <SearchForm\r\n            handleFormSubmit={this.handleFormSubmit}\r\n            handleInputChange={this.handleInputChange}\r\n            employees={this.state.employees}\r\n          />\r\n          <SearchResults results={this.state.results} />\r\n        </Container>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Search;\r\n","import React from 'react';\n//import { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport './App.css';\nimport Search from \"./pages/Search\"\n\nfunction App() {\n  return (\n    //<Router>\n      <div>\n        <Search />\n      </div>\n    //</Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}